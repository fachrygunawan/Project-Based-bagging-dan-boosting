# -*- coding: utf-8 -*-
"""ProjectBased_Kelompok Over Power.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DmF-lVx91t2fSN0z_lySCvSHoYefBh9w
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from scipy.stats import mode

data = pd.read_excel("https://github.com/SyamDN/project-based-german-credit/blob/main/german_credit.xlsx?raw=true")
data

print(data.isnull().sum())

data.info()

data = data.drop('number_credits', axis=1)
data = data.drop('job', axis=1)
data = data.drop('present_residence', axis=1)
data = data.drop('property', axis=1)

data_sc = data.iloc[:, :-1]
data_target = data.iloc[:, -1]

"""Mengubah data kategorikal menjadi numerik agar bisa diperiksa variansi datanya"""

# Buat objek LabelEncoder
le = LabelEncoder()

# Aplikasikan label encoding pada kolom yang diinginkan
data_sc['status'] = le.fit_transform(data_sc['status'])
data_sc['credit_history'] = le.fit_transform(data_sc['credit_history'])
data_sc['purpose'] = le.fit_transform(data_sc['purpose'])
data_sc['savings'] = le.fit_transform(data_sc['savings'])
data_sc['employment_duration'] = le.fit_transform(data_sc['employment_duration'])
data_sc['installment_rate'] = le.fit_transform(data_sc['installment_rate'])
data_sc['personal_status_sex'] = le.fit_transform(data_sc['personal_status_sex'])
data_sc['other_debtors'] = le.fit_transform(data_sc['other_debtors'])
#data_sc['present_residence'] = le.fit_transform(data_sc['present_residence'])
#data_sc['property'] = le.fit_transform(data_sc['property'])
data_sc['other_installment_plans'] = le.fit_transform(data_sc['other_installment_plans'])
data_sc['housing'] = le.fit_transform(data_sc['housing'])
#data_sc['number_credits'] = le.fit_transform(data_sc['number_credits'])
#data_sc['job'] = le.fit_transform(data_sc['job'])
data_sc['people_liable'] = le.fit_transform(data_sc['people_liable'])
data_sc['telephone'] = le.fit_transform(data_sc['telephone'])
data_sc['foreign_worker'] = le.fit_transform(data_sc['foreign_worker'])
data_sc

data_sc.info()

"""Memeriksa varians dari data selain data target"""

# Membagi data menjadi data training dan data testing dengan proporsi 70% data training dan 30% data testing
data_sc_train, data_sc_test, data_target_train, data_target_test = train_test_split(data_sc, data_target, test_size=0.3)

n_tree = 100
np.random.seed(1301204273)
forest = []
bootstrap_columns = []
for i in range(n_tree):
    # 1. Bootstrapping
    # select random rows
    rows = np.random.randint(len(data_sc_train), size=len(data_sc_train))
    x_bootstrap = data_sc_train.iloc[rows]
    y_bootstrap = data_target.iloc[rows]

    # Out of Bag data
    non_selected_rows = list(set(range(len(data_sc_train))) - set(rows))
    x_oob = data_sc_train.iloc[non_selected_rows]
    y_oob = data_target.iloc[non_selected_rows]

    print("Row that are not selected : ",len(x_oob))

    # 2. Select random features (make sure to keep track the selected columns)
    # Check for any repeated combinations
    feature_taken = np.random.randint(2, 4)
    cols = np.random.choice(data_sc_train.columns, feature_taken, replace=False)
    bootstrap_columns.append(cols)

    # filter based on the selected columns
    x_bootstrap = x_bootstrap[cols]

    # 3. Build decision tree
    tree_model = DecisionTreeClassifier()
    tree_model.fit(x_bootstrap,y_bootstrap)

    # Add it to the forest
    forest.append(tree_model)

    # 4. Calculate oob score only within its own tree
    oob_score = tree_model.score(x_oob[cols], y_oob)
    print("OOB Score : ",oob_score)

all_preds = []
for i, tree_model in enumerate(forest):
    # Each tree has different column requirements
    # Make sure you use the correct columns for each tree
    data_sc_test_filtered = data_sc_test[bootstrap_columns[i]]

    predictions = tree_model.predict(data_sc_test_filtered)

    # add it to all_preds for voting later
    all_preds.append(predictions)

all_preds = np.array(all_preds)

# Insert voting code here
voted_predictions = mode(all_preds, axis=0)[0][0]

# Calculate accuracy of Test data on the Forest
acc = accuracy_score(data_target_test, voted_predictions)
acc